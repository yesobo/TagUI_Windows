http://ca.finance.yahoo.com
// automation flow files start with an URL to tell TagUI where to go

// this flow shows how to use check step and CasperJS test assertions
// for issues or questions, kindly feedback on GitHub or support@tebel.org
// see cheatsheet for steps, conditions, finding element identifiers, etc
// https://github.com/tebelorg/TagUI#cheat-sheet

// use check step for simple testing of conditions (text in quotation marks, either " or ' works)
read search-buttons to search_button_text
check search_button_text equals to "Search" | "Search button text is correct." | "Search button text is missing."

// use CasperJS expressive test assertions for advanced testing
// http://docs.casperjs.org/en/latest/modules/tester.html

// to use CasperJS test assertions, run ./tagui with test option
// test assertions will be enabled by running with test option
// otherwise automation flow will run without the assertions
// TagUI helps the same automation flow file run in 2 ways

// use tx('selector') to use TagUI dynamic XPath/CSS selector to select an element 
// in the following order - xpath, css, id, name, class, title, text(), aria-label
// using this dynamic selector, a full XPath or CSS is not necessary for automation
// as properties id, name, class and so on are checked if they contain the identifier
// besides tx('selector'), you can also use 'selector' for CSS or x('selector') for XPath

// check whether the search button exists
test.assertExists(tx('search-buttons'));

// check whether the search button text is correct
test.assertSelectorHasText(tx('search-buttons'), 'Search');

// check that http status is correct (200 = OK)
test.assertHttpStatus(200);

// check that search box is visible
test.assertVisible(tx('uh-search'));

// you can set your own message to display during testing by putting another parameter in assertion
// using the above 4 examples, testing the assertions again with custom test messages for comparison
test.assertExists(tx('search-buttons'),'check whether the search button exists');
test.assertSelectorHasText(tx('search-buttons'), 'Search','check whether the search button text is correct');
test.assertHttpStatus(200,'check that http status is correct (200 = OK)');
test.assertVisible(tx('uh-search'),'// check that search box is visible');

// make some navigational steps, by searching for microsoft
enter uh-search as microsoft
click //*[@id="search-button"]

// delay for many seconds in case network is slow, default timeout is 10 seconds in tagui_config.txt
wait 13.57 seconds

// before testing the condition that the quote is Microsoft
read //*[@id="quote-header-info"]//h1 to stock_quote
test.assert(stock_quote=="Microsoft Corporation (MSFT)");

// capture some screenshots for test record purpose
snap //*[@id="quote-header-info"]//h1 to stock_quote.png
snap page to yahoo_finance.png

// CasperJS will output a XUnit XML, which is compatible with continuous integration tools such as Jenkins 
// running together with the report option outputs a web version of the test execution log for easy sharing
// you can use datatables for batch testing using different data sets to test comprehensively for regression
// check datatables section of cheatsheet or automation flow sample /src/samples/6_datatables/6C_datatables

// there is a result summary bug fixed in latest release - https://github.com/casperjs/casperjs/issues/1576
// to understand more on CasperJS test framework see this link
// http://docs.casperjs.org/en/latest/testing.html
